pipeline {
    agent any

    environment {
        SONARQUBE_TOKEN = credentials('sonar-tok') // SonarQube token from Jenkins credentials
        DOCKER_IMAGE = 'logistic.com'
        DOCKER_TAG = 'latest'
        DOCKERHUB_CREDENTIALS = 'dockerhub-tok' // Correct DockerHub credentials ID
        DOCKER_USERNAME = 'santhoshadmin' // DockerHub username
        GIT_CREDENTIALS = 'githubup' // GitHub credentials ID
        GITHUB_TOKEN = credentials('github-pat') // GitHub Personal Access Token stored in Jenkins
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                git branch: 'master', url: 'https://github.com/ssanthosh2k3/logistic.com.git', credentialsId: "${GIT_CREDENTIALS}"
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                    ${tool 'sonar-scanner'}/bin/sonar-scanner \
                    -Dsonar.projectKey=logistic.com \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=http://216.48.191.104:9000 \
                    -Dsonar.login=${SONARQUBE_TOKEN}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: "${DOCKERHUB_CREDENTIALS}", variable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh """
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Update Kubernetes Deployment') {
            steps {
                script {
                    sh """
                    sed -i 's|image: .*|image: ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}|' k8/deployment.yaml
                    git config --global user.email "jenkins@ci.com"
                    git config --global user.name "Jenkins CI"
                    git add k8/deployment.yaml
                    git commit -m "Update Kubernetes deployment with the latest Docker image"
                    """
                }
            }
        }

        stage('Push Changes to GitHub') {
            steps {
                script {
                    // Push changes to GitHub using the stored GitHub token for authentication
                    withCredentials([string(credentialsId: 'github-pat', variable: 'GITHUB_TOKEN')]) {
                        sh """
                        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/ssanthosh2k3/logistic.com.git
                        git push origin master
                        """
                    }
                }
            }
        }

        stage('Cleanup Docker Local Images') {
            steps {
                script {
                    sh """
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    docker rmi ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully. Docker image pushed to Docker Hub and Kubernetes deployment updated."
        }
        failure {
            echo "Pipeline failed. Please check the logs for details."
        }
    }
}
