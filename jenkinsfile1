pipeline {
    agent {
        docker {
            image 'maven:3.8.4-jdk-11'  // Replace with your desired Docker image
            args '-v /mnt:/mnt'    // Optional: You can pass additional Docker run arguments if needed
        }
    }

    environment {
        SONARQUBE_TOKEN = credentials('sonar-tok') // SonarQube token from Jenkins credentials
        DOCKER_IMAGE = 'logistic.com'
        DOCKER_TAG = 'latest'
        DOCKERHUB_CREDENTIALS = 'dockerhub-tok' // DockerHub credentials ID
        DOCKER_USERNAME = 'santhoshadmin' // DockerHub username
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                git branch: 'master', url: 'https://github.com/ssanthosh2k3/logistic.com.git', credentialsId: 'githubup'
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                    ${tool 'sonar-scanner'}/bin/sonar-scanner \
                    -Dsonar.projectKey=logistic.com \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=http://216.48.191.104:9000 \
                    -Dsonar.login=${SONARQUBE_TOKEN}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: "${DOCKERHUB_CREDENTIALS}", variable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh """
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Cleanup Docker Local Images') {
            steps {
                script {
                    sh """
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    docker rmi ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully. Docker image pushed to Docker Hub."
        }
        failure {
            echo "Pipeline failed. Please check the logs for details."
        }
    }
}
