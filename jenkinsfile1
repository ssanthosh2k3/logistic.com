pipeline {
    agent any

    environment {
        SONARQUBE_TOKEN = credentials('sonar-tok') // SonarQube token from Jenkins credentials
        DOCKER_IMAGE = 'logistic.com'
        DOCKER_TAG = "latest-${BUILD_NUMBER}"  // Append build number to the tag
        DOCKERHUB_CREDENTIALS = 'dockerhub-tok' // Correct DockerHub credentials ID
        DOCKER_USERNAME = 'santhoshadmin' // DockerHub username
        GITHUB_CREDENTIALS = 'githubup'  // Updated GitHub credentials ID
        REPO_URL = 'https://github.com/ssanthosh2k3/logistic.com.git' // Use HTTPS URL for cloning the repo
        DEPLOYMENT_FILE = 'k8/deployment.yaml' // Path to your Kubernetes deployment file in the repo
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                script {
                    // Use GitHub token for authentication
                    withCredentials([string(credentialsId: "${GITHUB_CREDENTIALS}", variable: 'GITHUB_TOKEN')]) {
                        sh """
                        git config --global credential.helper 'store --file=/tmp/git-credentials'
                        echo "https://\${GITHUB_TOKEN}:x-oauth-basic@github.com" > /tmp/git-credentials
                        git clone ${REPO_URL}
                        """
                    }
                }
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                    ${tool 'sonar-scanner'}/bin/sonar-scanner \
                    -Dsonar.projectKey=logistic.com \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=http://216.48.191.104:9000 \
                    -Dsonar.login=${SONARQUBE_TOKEN}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub using the access token stored in Jenkins
                    withCredentials([string(credentialsId: "${DOCKERHUB_CREDENTIALS}", variable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Push Docker image to Docker Hub with the build number included
                    sh """
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Update Deployment in GitHub') {
            steps {
                script {
                    // Change directory to the cloned repo
                    dir('logistic.com') {
                        // Update the image tag in the deployment.yaml file
                        def newImageTag = "${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                        sh "sed -i 's|image: .*|image: ${newImageTag}|' ${DEPLOYMENT_FILE}"
                        
                        // Commit and push the changes to GitHub
                        sh 'git config user.name "Jenkins"'
                        sh 'git config user.email "jenkins@yourdomain.com"'
                        sh 'git add .'
                        sh 'git commit -m "Update Docker image to ${newImageTag}"'
                        sh 'git push origin master'
                    }
                }
            }
        }

        stage('Cleanup Docker Local Images') {
            steps {
                script {
                    // Clean up local Docker images to save space
                    sh """
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    docker rmi ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully. Docker image pushed to Docker Hub and deployment file updated."
        }
        failure {
            echo "Pipeline failed. Please check the logs for details."
        }
    }
}
